// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.747
package viewer

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func Show() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<style type=\"text/css\">\n                .writeEmail{\n                        background-color: #FFFFFF;\n                        display: flex;\n                        padding-bottom: 20px;\n                        padding-top: 10px;\n                        margin-bottom: 2px;\n                        margin-top: 2px;\n                }\n                .formBox {\n                        display: flex;\n                        justify-content: center;\n                        align-items: center;\n                        background-color: #BFD9E3;\n                }\n                .curved-section::after {\n                  content: '';\n                  position: absolute;\n                  bottom: 0; left: 50%;\n                  transform: translateX(-50%);\n                  width: 100px; /* Adjust width for desired curve */\n                  height: 50px; /* Adjust height for desired curve */\n                  background-color: white;\n                  border-radius: 50%;\n                }\n                .inputBar {\n                        width: 100%;\n                        margin-top: 2px;\n                        height: 30px;\n                        border-radius: 10px;\n                }\n                .message {\n                        margin-bottom: 20px;\n                        width: 95%;\n                        border-radius: 25px;\n                        padding: 4%;\n                }\n                .writeEmail {\n                        display: flex;\n                        align-items: center;\n                        justify-content: center;\n                }\n                .centerButton {\n                        display: flex;\n                        justify-content: center;\n                        align-items:center;\n                }\n                .separateInputs {\n                        margin-bottom: 10px;\n                }\n                .messageLabel {\n                        display: block;\n                        margin-top: 20px;\n                        padding-top: 10px;\n                }\n        </style> <script>\n        document.body.addEventListener('htmx:afterOnLoad', function(event) {\n                let response = JSON.parse(event.detail.xhr.responseText);\n                let errorDiv = document.getElementById('error-message');\n                errorDiv.innerHTML = '';\n                errorDiv.style.textAlign = 'center';\n                let mesg = response.messages\n                if (response.success) {\n                        errorDiv.innerHTML = '<div style=\"color: green;\">' + response.messages.join('\\n') + '</div>';\n                } else {\n                        errorDiv.innerHTML = '<div style=\"color: red;\">' + response.messages.join('\\n') + '</div>';\n                }\n                });        \n        </script> <h1 class=\"writeEmail\">Write Email</h1><div class=\"formBox\"><form hx-post=\"/emailed\" hx-trigger=\"submit\" hx-target=\"#error-message\"><div class=\"separateInputs\"><label for=\"emailfrom\">From:</label><br><input placeholder=\"Email From...\" class=\"inputBar\" type=\"text\" id=\"emailfrom\" name=\"emailfrom\"><br></div><div class=\"separateInputs\"><label for=\"emailto\">To:</label><br><input placeholder=\"Email To...\" class=\"inputBar\" type=\"text\" id=\"emailto\" name=\"emailto\"><br></div><div class=\"separateInputs\"><label for=\"subject\">Subject:</label><br><input placeholder=\"Subject...\" class=\"inputBar\" type=\"text\" id=\"subject\" name=\"subject\"><br></div><label class=\"messageLabel\" for=\"message\">Message: </label><br><br><textarea class=\"message\" name=\"message\" id=\"message\" rows=\"25\" cols=\"50\"></textarea><div class=\"centerButton\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = button("Send Mail").Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div><div id=\"error-message\"></div></form></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return templ_7745c5c3_Err
		})
		templ_7745c5c3_Err = Layout().Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}
